.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LUPA-PONA 1"
.TH LUPA-PONA 1 "2020-11-07" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Lupa Pona"
.IX Header "Lupa Pona"
Lupa Pona serves the local directory as a Gemini site.
.SS "Dependencies"
.IX Subsection "Dependencies"
Perl libraries you need to install if you want to run Lupa Pona:
.IP "IO::Socket::INET6" 4
.IX Item "IO::Socket::INET6"
.PD 0
.IP "IO::Socket::SSL" 4
.IX Item "IO::Socket::SSL"
.IP "File::Slurper" 4
.IX Item "File::Slurper"
.IP "Modern::Perl" 4
.IX Item "Modern::Perl"
.IP "Net::Server" 4
.IX Item "Net::Server"
.IP "URI::Escape" 4
.IX Item "URI::Escape"
.PD
.PP
Since Lupa Pona traffic is encrypted, we need to generate a
certificate and a key. These are both stored in \s-1PEM\s0 files. To create
your own copies of these files (and you should!), use \*(L"make cert\*(R" if
you have a copy of the Makefile. If you don't, use this:
.PP
.Vb 3
\&    openssl req \-new \-x509 \-newkey ec \e
\&    \-pkeyopt ec_paramgen_curve:prime256v1 \e
\&    \-days 1825 \-nodes \-out cert.pem \-keyout key.pem
.Ve
.PP
Answer all the questions with \*(L".\*(R" except for the one about the Common Name.
There, answer \*(L"localhost\*(R" while you're still testing things. Later, use your own
domain name.
.PP
This creates a certificate and a private key, both of them unencrypted, using
eliptic curves of a particular kind, valid for five years.
.PP
You should have three files, now: \fIlupa-pona\fR, \fIcert.pem\fR, and
\&\fIkey.pem\fR. That's enough to get started! Start the server:
.PP
.Vb 1
\&    perl lupa\-pona
.Ve
.PP
This starts the server in the foreground, for `gemini://localhost:1965`. If it
aborts, see the \*(L"Troubleshooting\*(R" section below. If it runs, open a second
terminal and test it:
.PP
.Vb 2
\&    echo gemini://localhost \e
\&      | openssl s_client \-\-quiet \-\-connect localhost:1965 2>/dev/null
.Ve
.PP
You should see a Gemini page starting with the following:
.PP
.Vb 2
\&    20 text/gemini; charset=UTF\-8
\&    Welcome to Lupa Pona!
.Ve
.PP
Success!! X \s-1XX\s0
.SS "Troubleshooting"
.IX Subsection "Troubleshooting"
X \fBCannot connect to \s-1SSL\s0 port 1965 on 127.0.0.1 [No such file or
directory]\fR X Perhaps your Net::Server::Proto::SSL module is too
old? Lupa Pona comes with a separate \fIlib\fR directory which contains a
patched version of the module. Move this directory into your working
directory where you want to run Lupa Pona and try again.
.PP
X \fBSSL_cert_file cert.pem can't be used: No such file or directory\fR
X Perhaps you're missing the certificate (\fIcert.pem\fR) or key file
(\fIkey.pem\fR). \fIGenerate your own\fR using the Makefile: \f(CW\*(C`make cert\*(C'\fR
should do it.
.SS "Options"
.IX Subsection "Options"
Lupa Pona uses Net::Server in the background, which has a ton
options. Let's try to focus on the options you might want to use right
away.
.PP
Here's the documentation for the most useful options:
.ie n .IP """\-\-host"" is the hostname to serve; the default is ""localhost"" X you probably want to pick the name of your machine, if it is reachable from the Internet" 4
.el .IP "\f(CW\-\-host\fR is the hostname to serve; the default is \f(CWlocalhost\fR X you probably want to pick the name of your machine, if it is reachable from the Internet" 4
.IX Item "--host is the hostname to serve; the default is localhost X you probably want to pick the name of your machine, if it is reachable from the Internet"
.PD 0
.ie n .IP """\-\-port"" is the port to use; the default is 1965" 4
.el .IP "\f(CW\-\-port\fR is the port to use; the default is 1965" 4
.IX Item "--port is the port to use; the default is 1965"
.ie n .IP """\-\-log_level"" is the log level to use, 0 is quiet, 1 is errors, 2 is warnings, 3 is info, and 4 is debug; the default is 2" 4
.el .IP "\f(CW\-\-log_level\fR is the log level to use, 0 is quiet, 1 is errors, 2 is warnings, 3 is info, and 4 is debug; the default is 2" 4
.IX Item "--log_level is the log level to use, 0 is quiet, 1 is errors, 2 is warnings, 3 is info, and 4 is debug; the default is 2"
.PD
.SS "Running Lupa Pona as a Daemon"
.IX Subsection "Running Lupa Pona as a Daemon"
If you want to start Lupa Pona as a daemon, the following options come
in handy:
.ie n .IP """\-\-setsid"" makes sure Lupa Pona runs as a daemon in the background" 4
.el .IP "\f(CW\-\-setsid\fR makes sure Lupa Pona runs as a daemon in the background" 4
.IX Item "--setsid makes sure Lupa Pona runs as a daemon in the background"
.PD 0
.ie n .IP """\-\-pid_file"" is the file where the process id (pid) gets written once the server starts up; this is useful if you run the server in the background and you need to kill it" 4
.el .IP "\f(CW\-\-pid_file\fR is the file where the process id (pid) gets written once the server starts up; this is useful if you run the server in the background and you need to kill it" 4
.IX Item "--pid_file is the file where the process id (pid) gets written once the server starts up; this is useful if you run the server in the background and you need to kill it"
.ie n .IP """\-\-log_file"" is the file to write logs into; the default is to write log output to the standard error (stderr)" 4
.el .IP "\f(CW\-\-log_file\fR is the file to write logs into; the default is to write log output to the standard error (stderr)" 4
.IX Item "--log_file is the file to write logs into; the default is to write log output to the standard error (stderr)"
.ie n .IP """\-\-user"" and ""\-\-group"" might come in handy if you start Lupa Pona using a different user" 4
.el .IP "\f(CW\-\-user\fR and \f(CW\-\-group\fR might come in handy if you start Lupa Pona using a different user" 4
.IX Item "--user and --group might come in handy if you start Lupa Pona using a different user"
.PD
.SS "Using systemd"
.IX Subsection "Using systemd"
In this case, we don't want to daemonize the process. Systemd is going to handle
that for us. There's more documentation available
online <https://www.freedesktop.org/software/systemd/man/systemd.service.html>.
.PP
You could create a specific user:
.PP
.Vb 1
\&    sudo adduser \-\-disabled\-login \-\-disabled\-password lupa\-pona
.Ve
.PP
Copy Lupa Pona to \f(CW\*(C`/home/lupa\-pona/lupa\-pona\*(C'\fR.
.PP
Basically, this is the template for our service:
.PP
.Vb 12
\&    [Unit]
\&    Description=Lupa Pona
\&    After=network.target
\&    [Service]
\&    Type=simple
\&    WorkingDirectory=/home/lupa\-pona
\&    ExecStart=/home/lupa\-pona/lupa\-pona
\&    Restart=always
\&    User=lupa\-pona
\&    Group=lupa\-pona
\&    [Install]
\&    WantedBy=multi\-user.target
.Ve
.PP
Save this as \fIlupa\-pona.service\fR, and then link it:
.PP
.Vb 1
\&    sudo ln \-s /home/lupa\-pona/lupa\-pona.service /etc/systemd/system/
.Ve
.PP
Reload systemd:
.PP
.Vb 1
\&    sudo systemctl daemon\-reload
.Ve
.PP
Start Lupa Pona:
.PP
.Vb 1
\&    sudo systemctl start lupa\-pona
.Ve
.PP
Check the log output:
.PP
.Vb 1
\&    sudo journalctl \-\-unit lupa\-pona
.Ve
.PP
All the files in \f(CW\*(C`/home/lupa\-pona\*(C'\fR are going to be served, if the \f(CW\*(C`lupa\-pona\*(C'\fR
user can read them.
.SS "Privacy"
.IX Subsection "Privacy"
If you increase the log level, the server will produce more output, including
information about the connections happening, like \f(CW\*(C`2020/06/29\-15:35:59 CONNECT
SSL Peer: "[::1]:52730" Local: "[::1]:1965"\*(C'\fR and the like (in this case \f(CW\*(C`::1\*(C'\fR
is my local address so that isn't too useful but it could also be your visitor's
\&\s-1IP\s0 numbers, in which case you will need to tell them about it using in order to
comply with the
\&\s-1GDPR\s0 <https://en.wikipedia.org/wiki/General_Data_Protection_Regulation>.
